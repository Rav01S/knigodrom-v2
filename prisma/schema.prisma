generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id              String            @id
  role            Role              @default(USER)
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  sessions        Session[]
  accounts        Account[]
  UserBookRaiting UserBookRaiting[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Book {
  id              String            @id @default(cuid())
  title           String
  downloadUrl     String?
  publishedAt     DateTime
  createdAt       DateTime
  updatedAt       DateTime
  Author          Author?           @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId        String?
  UserBookRaiting UserBookRaiting[]

  @@map("book")
}

model BookImage {
  id        String   @id @default(cuid())
  bookId    String
  url       String
  createdAt DateTime
  updatedAt DateTime

  @@map("book_image")
}

model UserBookRaiting {
  bookId  String
  book    Book    @relation(references: [id], fields: [bookId], onDelete: Cascade)
  userId  String
  user    User    @relation(references: [id], fields: [userId], onDelete: Cascade)
  raiting Int
  comment String?

  @@id([bookId, userId])
}

model Author {
  id        String    @id @default(cuid())
  name      String
  bio       String?
  birthDate DateTime?
  deathDate DateTime?
  books     Book[]
  createdAt DateTime
  updatedAt DateTime

  @@map("author")
}

model AuthorImage {
  id        String   @id @default(cuid())
  authorId  String
  url       String
  createdAt DateTime
  updatedAt DateTime

  @@map("author_image")
}

enum UsersBookStatus {
  READING
  READED
  IN_QUEUE
  NOT_LIKED
}

model UserBookStatus {
  userId    String
  bookId    String
  status    String
  createdAt DateTime
  updatedAt DateTime

  @@id([userId, bookId])
  @@map("user_book_status")
}
